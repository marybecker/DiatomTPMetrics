# Convert from logit transformed values to probability.
up.bound <- exp(up.bound.link)/(1+exp(up.bound.link))
low.bound <- exp(low.bound.link)/(1+exp(low.bound.link))
mean.resp <- exp(mean.resp.link)/(1+exp(mean.resp.link))
# unimod.test requires that the responses be sorted by
# the value of the environmental variable.
iord <- order(SPP.TP$TP)
tolcl[i] <- unimod.test(mean.resp[iord], up.bound[iord],
low.bound[iord])
}
tolcl_mat<- as.matrix(tolcl)
CURVEoutput[,k]<- tolcl_mat[,1]
roc <- rep(NA, times = length(taxa.names))
for (i in 1:length(taxa.names)) {
# Compute mean predicted probability of occurrence
predout <- predict(modlist.gam[[i]], type = "response")
# Generate logical vector corresponding to presence/absence
resp <- SPP.TP[, taxa.names[i]] > 0
# Divide predicted probabilities into sites where
# species is present ("x") and sites where the species is
# absent ("y").
x <- predout[resp]
y <- predout[! resp]
# Now perform all pairwise comparisons of x vs. y
# and store results in a matrix
rocmat <- matrix(NA, nrow = length(x), ncol = length(y))
for (j in 1:length(x)) {
rocmat[j,] <- as.numeric(x[j] > y)
}
# Summarize all comparisons to compute area under ROC
roc[i] <- sum(rocmat)/(length(x)*length(y))
}
roc_mat<- as.matrix(roc)
ROCoutput[,k]<- roc_mat[,1]
}
IncrCnt<- rowSums(CURVEoutput=="Increasing",na.rm=TRUE)
DecrCnt<- rowSums(CURVEoutput=="Decreasing",na.rm=TRUE)
UniCnt<- rowSums(CURVEoutput=="Unimodal",na.rm=TRUE)
ROCCnt<- rowSums(ROCoutput>=0.6,na.rm=TRUE)
names(ROCCnt)<-taxa.names
CurveCnt<- cbind(ROCCnt,IncrCnt,DecrCnt,UniCnt)
write.table(CurveCnt,"CurveSppGAM033017.csv",sep=",",row.names=TRUE,col.names=NA)
SPP.TP <- merge (spp,TP,by=0)
# Create storage list for models
modlist.gam <- as.list(rep(NA, times = length(taxa.names)))
for (i in 1:length(taxa.names)) {
# Create a logical vector is true if taxon is
#   present and false if taxon is absent.
resp <- SPP.TP[, taxa.names[i]] > 0
# Fit the regression model, specifying two degrees of freedom
# to the curve fit.
modlist.gam[[i]] <- gam(resp ~ s(SPP.TP$TP, df = 2),
family = "binomial")
print(summary(modlist.gam[[i]]))
}
for (i in 1:length(taxa.names)) {
# Compute mean predicted probability of occurrence
# and standard errors about this predicted probability.
predres <- predict(modlist.gam[[i]], type= "link",se.fit=T)
# Compute approximate upper and lower 90% confidence limits
up.bound.link <- predres$fit + 1.65*predres$se.fit
low.bound.link <- predres$fit - 1.65*predres$se.fit
mean.resp.link <- predres$fit
# Convert from logit transformed values to probability.
up.bound <- exp(up.bound.link)/(1+exp(up.bound.link))
low.bound <- exp(low.bound.link)/(1+exp(low.bound.link))
mean.resp <- exp(mean.resp.link)/(1+exp(mean.resp.link))
# Sort the environmental variable.
iord <- order(SPP.TP$TP)
# Define bins to summarize observational data as
# probabilities of occurrence
nbin <- 5
# Define bin boundaries so each bin has approximately the same
# number of observations.
cutp <- quantile(SPP.TP$TP,
probs = seq(from = 0, to = 1, length = 20))
# Compute the midpoint of each bin
cutm <- 0.5*(cutp[-1] + cutp[-nbin])
# Assign a factor to each bin
cutf <- cut(SPP.TP$TP, cutp, include.lowest = T)
# Compute the mean of the presence/absence data within each bin.
vals <- tapply(SPP.TP[, taxa.names[i]] > 0, cutf, mean)
# Now generate the plot
# Plot binned observational data as symbols.
file_name<- file.path("/Users/tbecker/Documents/Projects/GitHubProjects/DiatomTPMetrics/Plots",
paste("GAM","_",taxa.names[i],".tiff"))
tiff(file=file_name,width=600,height=600,pointsize=20)
plot(x=cutm, y=vals, xlab = "Total Phosphorus (mg/L)",
ylab = "Probability of occurrence", ylim = c(0,1),
main = taxa.names[i],pch=16,col="black")
# Plot mean fit as a solid line.
lines(x= SPP.TP$TP[iord], y= mean.resp[iord],col="red",lwd=2)
# Plot confidence limits as dotted lines.
lines (SPP.TP$TP[iord], up.bound[iord], lty = "dotted")
lines (x=SPP.TP$TP[iord], y=low.bound[iord], lty = "dotted")
dev.off()
}
chi <- as.vector(matrix(0.0,ncol=length(taxa.names),nrow=1))
# Conduct chi-square tests on nested parametric models
for (i in 1:length(taxa.names)) {
print(taxa.names[i])
resp <- SPP.TP[,taxa.names[i]] > 0
modcmp <- gam(resp ~ 1, family = binomial, data = SPP.TP)
modout <- anova(modlist.gam[[i]], modcmp, test = "Chi")
print(modout)
chi[i] <- modout[2,'Pr(>Chi)']
if (modout[2,'Pr(>Chi)'] < 0.05) {
print("Model significant compared to constant")
}
names(chi)<- taxa.names
write.table(chi,"GAM_ChiSquareANOVA.csv",sep=",",row.names=TRUE)
setwd ("/Users/tbecker/Documents/Projects/GitHubProjects/DiatomTPMetrics")#SET WD#
INDICES <-  read.csv ("data/DiatomMetrics_033017.csv",sep=",",header=TRUE)
pHINDICES<- read.csv ("data/DiatomMetricspH.csv",sep=",",header=TRUE)
TINDICES<-  read.csv ("data/DiatomMetricsJulyTemp.csv",sep=",",header=TRUE)
TPQuant<- quantile(INDICES$TP_MGL,0.5)
INDICES$GRP <- ifelse(INDICES$TP_MGL > TPQuant,"H", "L")
pHQuant<- quantile(pHINDICES$pH,0.5)
pHINDICES$GRP <- ifelse(pHINDICES$pH > pHQuant,"H", "L")
TQuant<- quantile(TINDICES$Jtemp,0.5)
TINDICES$GRP <- ifelse(TINDICES$Jtemp > TQuant,"H", "L")
library(ggplot2)
library(grid)
library(plyr)
library(reshape2)
VARDF<- INDICES
VAR<- which(colnames(VARDF)=="TP_MGL")
QUANT<-quantile(VARDF[,VAR],0.25)
LGrp<- VARDF[which(VARDF[,VAR]<=QUANT),]
L75 <- quantile(LGrp$H,0.75)
L25 <- quantile(LGrp$L,0.25)
LR75 <- quantile(LGrp$R,0.75)
GrpTotal <- VARDF[which(VARDF[,VAR]>QUANT),]
n<- length(GrpTotal$ID)
GrpSubset <- VARDF[which(VARDF[,VAR]>QUANT& VARDF$H >L75),]
n_subset <- length(GrpSubset$ID)
TolMetDE<- n_subset/n
#####Sensitive Metric DE
GrpSubset <- VARDF[which(VARDF[,VAR]>QUANT& VARDF$L <L25),]
n_subset <- length(GrpSubset$ID)
SenMetDE<-n_subset/n
#####Diatom Index DE
GrpSubset <- VARDF[which(VARDF[,VAR]>QUANT& VARDF$R >LR75),]
n_subset <- length(GrpSubset$ID)
DIDE<-n_subset/n
TPDiatom<-rbind(TolMetDE,SenMetDE,DIDE)
TPDiatom
INDICES$GRP<- factor(INDICES$GRP,levels=c("L","H"))
ggplot(INDICES,aes(x=GRP,y=H,fill=GRP))+
geom_boxplot(aes(fill=GRP))+
ylim(0,1)+
labs(y="Relative Abundance TP Tolerant")+
theme(legend.position="none",axis.title.x=element_blank(),plot.title=element_text(hjust=0),
plot.title=element_text(size=10),axis.text=element_text(size=10),
axis.text.x=element_blank(),axis.title.x=element_text(size=10),axis.title.y=element_text(size=10))+
scale_fill_manual(values=c("black","white"))+
annotate("text",x=1,y=1,label="Total Phosphorus",size=3)+
geom_hline(yintercept = quantile(INDICES$H,0.5),size=2,col="gray46")
ggplot(INDICES,aes(x=GRP,y=H,fill=GRP))+
geom_boxplot(aes(fill=GRP))+
ylim(0,1)+
labs(y="Relative Abundance TP Tolerant")
ggplot(INDICES,aes(x=GRP,y=L,fill=GRP))+
geom_boxplot(aes(fill=GRP))+
ylim(0,1)+
labs(y="Relative Abundance TP Sensitive")
ggplot(INDICES,aes(x=GRP,y=R,fill=GRP))+
geom_boxplot(aes(fill=GRP))+
ylim(0,10)+
labs(y="Tolerant to Sensitive TP Index")
ggplot(INDICES,aes(x=GRP,y=R,fill=GRP))+
geom_boxplot(aes(fill=GRP))+
ylim(0,10)+
labs(y="Tolerant to Sensitive TP Index")+
theme(legend.position="none",
plot.title=element_text(hjust=0),
plot.title=element_text(size=10),axis.text=element_text(size=10),
axis.title.y=element_text(size=10),axis.title.x=element_blank())+
scale_fill_manual(values=c("black","white"))+
annotate("text",x=1,y=10,label="Total Phosphorus",size=3)+
geom_hline(yintercept = quantile(INDICES$R,0.5),size=2,col="gray46")
gplot(INDICES,aes(x=GRP,y=R,fill=GRP))+
geom_boxplot(aes(fill=GRP))+
ylim(0,10)+
labs(y="Tolerant to Sensitive TP Index")+
theme(legend.position="none",
#plot.title=element_text(hjust=0),plot.title=element_text(size=10),
axis.text=element_text(size=10),
axis.title.y=element_text(size=10),axis.title.x=element_blank())+
scale_fill_manual(values=c("black","white"))+
annotate("text",x=1,y=10,label="Total Phosphorus",size=3)+
geom_hline(yintercept = quantile(INDICES$R,0.5),size=2,col="gray46")
ggplot(INDICES,aes(x=GRP,y=R,fill=GRP))+
geom_boxplot(aes(fill=GRP))+
ylim(0,10)+
labs(y="Tolerant to Sensitive TP Index")+
theme(legend.position="none",
#plot.title=element_text(hjust=0),plot.title=element_text(size=10),
axis.text=element_text(size=10),
axis.title.y=element_text(size=10),axis.title.x=element_blank())+
scale_fill_manual(values=c("black","white"))+
annotate("text",x=1,y=10,label="Total Phosphorus",size=3)+
geom_hline(yintercept = quantile(INDICES$R,0.5),size=2,col="gray46")
ggplot(INDICES,aes(x=GRP,y=H,fill=GRP))+
geom_boxplot(aes(fill=GRP))+
ylim(0,1)+
labs(y="Relative Abundance TP Tolerant")+
theme(legend.position="none",axis.title.x=element_blank(),
# plot.title=element_text(hjust=0),plot.title=element_text(size=10),
axis.text=element_text(size=10),
axis.text.x=element_blank(),axis.title.x=element_text(size=10),
axis.title.y=element_text(size=10))+
scale_fill_manual(values=c("black","white"))+
annotate("text",x=1,y=1,label="Total Phosphorus",size=3)+
geom_hline(yintercept = quantile(INDICES$H,0.5),size=2,col="gray46")
ggplot(INDICES,aes(x=GRP,y=H,fill=GRP))+
geom_boxplot(aes(fill=GRP))+
ylim(0,1)+
labs(y="Relative Abundance TP Tolerant")+
theme(legend.position="none",axis.title.x=element_blank(),
# plot.title=element_text(hjust=0),plot.title=element_text(size=10),
axis.text.x=element_blank(),
axis.title.y=element_text(size=10))+
scale_fill_manual(values=c("black","white"))+
annotate("text",x=1,y=1,label="Total Phosphorus",size=3)+
geom_hline(yintercept = quantile(INDICES$H,0.5),size=2,col="gray46")
ggplot(INDICES,aes(x=GRP,y=R,fill=GRP))+
geom_boxplot(aes(fill=GRP))+
ylim(0,10)+
labs(y="Tolerant to Sensitive TP Index")+
theme(legend.position="none",
#plot.title=element_text(hjust=0),plot.title=element_text(size=10),
axis.text=element_text(size=10),
axis.title.y=element_text(size=10),axis.title.x=element_blank())+
scale_fill_manual(values=c("black","white"))+
annotate("text",x=1,y=10,label="Total Phosphorus",size=3)+
geom_hline(yintercept = quantile(INDICES$R,0.5),size=2,col="gray46")
ggplot(INDICES,aes(x=GRP,y=L,fill=GRP))+
geom_boxplot(aes(fill=GRP))+
ylim(0,1)+
labs(y="Relative Abundance TP Sensitive")+
theme(legend.position="none",axis.title.x=element_blank(),
#plot.title=element_text(hjust=0),plot.title=element_text(size=10),
axis.text=element_text(size=10),
axis.text.x=element_blank(),axis.title.y=element_text(size=10))+
scale_fill_manual(values=c("black","white"))+
annotate("text",x=1,y=1,label="Total Phosphorus",size=3)+
geom_hline(yintercept = quantile(INDICES$L,0.5),size=2,col="gray46")
CurveROC<- cbind(CURVEoutput,ROCoutput)
save.image("~/Documents/Projects/GitHubProjects/DiatomTPMetrics/DiatomMetricsRun033017.RData")
load("/Users/tbecker/Documents/Projects/GitHubProjects/DiatomTPMetrics/DiatomMetricsRun033017.RData")
